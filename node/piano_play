#!/usr/bin/env python
"""
DESCRIPTION:
+ Puts Baxter into final pose after firing gun

PUBLISHERS:
+ display_trajectory_publisher (/move_group/display_planned_path) - displays trajectory in RViz

SUBSCRIBES:
+ left_pose_sub(/left_tag_pose)  - tag1 pose for the left arm)
+ right_pose_sub(/right_tag_pose)  - tag2 pose for the right arm
"""

import sys
import rospy
import copy
import baxter_interface
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import numpy as np
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped
from baxter_interface import Gripper, CHECK_VERSION
from std_msgs.msg import String, Bool
from sensor_msgs.msg import Range
from moveit_commander.conversions import pose_to_list
import tf.transformations as tr
from tf.transformations import quaternion_from_euler
from tf.transformations import quaternion_matrix
from tf.transformations import quaternion_from_euler
from tf.transformations import euler_from_matrix
# from path_planner import PathPlanner
from healer import *

class PianoPlay(object):
	"""
	Initializes Baxter before moving to final position
	"""

	def __init__(self):

		# rospy.loginfo("Ready for moving to the final pose")
		rospy.loginfo("finish the first config, piano playing node initializing")
		super(PianoPlay, self).__init__()
		# First initialize moveit_commander and a rospy node:
		moveit_commander.roscpp_initialize(sys.argv)
		rospy.init_node("piano_play", anonymous=True)
		# Instantiate a RobotCommander object.
		joint_state_topic = ['joint_states:=/robot/joint_states']
		baxter_interface.RobotEnable().enable()
		moveit_commander.roscpp_initialize(joint_state_topic)
		self.robot = moveit_commander.RobotCommander()
		# Instantiate a PlanningSceneInterface object.
		self.scene = moveit_commander.PlanningSceneInterface()
		# Instantiate a MoveGroupCommander object. This object is an interface to a planning group
		
		rospy.sleep(0.25)

		self.move_group = moveit_commander.MoveGroupCommander('both_arms')
		self.end_effector_link ='gripper'
		self.leftcount = 0
		self.rightcount = 0
		self.quat_right={} 
		self.trans_right={}
		self.quat_left={} 
		self.trans_left={}

		# setting parameters for left arm group
		self.position_tolerance = 0.05
		self.orientation_tolerance = 0.02
		self.move_group.set_goal_position_tolerance(self.position_tolerance)
		self.move_group.set_goal_orientation_tolerance(self.orientation_tolerance)
		self.move_group.set_planning_time(10.0)
		self.move_group.allow_replanning(True)
		self.move_group.set_max_velocity_scaling_factor(0.2)
		self.move_group.set_max_acceleration_scaling_factor(0.1)

		# important parameters for position adjustment
		self.tag = 0.025 #cm
		self.key_length = 0.022
		self.left_tunning = 0.15 #cm

		self.prestand_z = 0.1

		self.left_tag_pose = None
		self.right_tag_pose = None

		# self.left_orientation_x = -0.0075195
		# self.left_orientation_y = 0.999649
		# self.left_orientation_z = 0.0156364
		# self.left_orientation_w = 0.0200044


		# self.right_orientation_x = 0.0573664
		# self.right_orientation_y = 0.99794
		# self.right_orientation_z = -0.013948
		# self.right_orientation_w = -0.0251204

		self.left_orientation_x = 0.0
		self.left_orientation_y = 1.0
		self.left_orientation_z = 0.0
		self.left_orientation_w = 0.0


		self.right_orientation_x = 0.0
		self.right_orientation_y = 1.0
		self.right_orientation_z = 0.0
		self.right_orientation_w = 0.0




		#trajectory in RVIZ
		self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path'
				,moveit_msgs.msg.DisplayTrajectory,queue_size=20)
		
		###############  publisher and subscriber  #####################
		# self.left_pose_sub = rospy.Subscriber('/left_tag_pose', Pose, self.left_tag_position)
		# self.right_pose_sub = rospy.Subscriber('/right_tag_pose', Pose, self.right_tag_position)
		#################################################################
		self.left_tag_pose = rospy.wait_for_message('/left_tag_pose' ,Pose)  
		self.quat_left, self.trans_left = extract_pose(self.tag_in_base(self.left_tag_pose))
		print("pose of left tag in base frame: \n")
		print("trans of left tag in base frame: \n")
		print(self.trans_left)
		print("orientation of left tag in base frame: \n")
		print(self.quat_left)
		rospy.sleep(1)

		self.right_tag_position = rospy.wait_for_message('/right_tag_pose',Pose)  
		self.quat_right, self.trans_right = extract_pose(self.tag_in_base(self.right_tag_position))
		print("pose of right tag")
		print("trans of right tag in base frame: \n")
		print(self.trans_right)
		print("orientation of right tag in base frame: \n")
		print(self.quat_right)
		rospy.sleep(0.5)

		print("start playing the piano")


	def tag_in_base(self,pose_tag):
		""" return transformation of tag relative to baxter """

		print("pose tag recieved: \n")
		print(pose_tag)
		# since we get the pose through left camera, the end effector is left gripper
		left_EE_pose = geometry_msgs.msg.Pose()

		left_EE_pose.position.x = 0.754
		left_EE_pose.position.y = 0.187
		left_EE_pose.position.z = 0.147	
		left_EE_pose.orientation.x = 0.709 
		left_EE_pose.orientation.y = -0.704
		left_EE_pose.orientation.z = 0.001
		left_EE_pose.orientation.w = -0.023

		# right_EE_pose.position.x = 0.727
		# right_EE_pose.position.y = -0.203
		# right_EE_pose.position.z = 0.118	
		# right_EE_pose.orientation.x = -0.670
		# right_EE_pose.orientation.y = 0.742
		# right_EE_pose.orientation.z = 0.011
		# right_EE_pose.orientation.w = -0.025

		#compute transformation of tag relative to EE
		Tet = get_transform(pose_tag)
		# compute transformation of EE relative to baxter
		Tbe = get_transform(left_EE_pose)
		Tbt = np.dot(Tbe, Tet)

		return Tbt

	def test_simulation(self):
		self.left_tag_pose = geometry_msgs.msg.Pose()
		self.right_tag_pose = geometry_msgs.msg.Pose()

		self.left_tag_pose.position.x = -0.133323046826		
		self.left_tag_pose.position.y = -0.00400998103725
		self.left_tag_pose.position.z = 0.326267461061

		self.left_tag_pose.orientation.x = 0.999080194302
		self.left_tag_pose.orientation.y = -0.000125676412631
		self.left_tag_pose.orientation.z = -0.0133912468974
		self.left_tag_pose.orientation.w = 0.0407360290951

		self.right_tag_pose.position.x = 0.332697158343		
		self.right_tag_pose.position.y = -0.00815768703415
		self.right_tag_pose.position.z = 0.327289280325

		self.right_tag_pose.orientation.x = 0.999625917452
		self.right_tag_pose.orientation.y = 0.00336223810476
		self.right_tag_pose.orientation.z = -0.00254596127857
		self.right_tag_pose.orientation.w = 0.0270229272058

		Transformation_left = self.tag_in_base(self.left_tag_pose)
		self.quat_left, self.trans_left = extract_pose(Transformation_left)
		print("pose of left tag in base frame: \n")
		print(self.trans_left)
		print(self.quat_left)

		Transformation_right = self.tag_in_base(self.right_tag_pose)
		self.quat_right, self.trans_right = extract_pose(Transformation_right)
		print("pose of right tag in base frame: \n")
		print(self.trans_right)
		print(self.quat_right)


	def left_tag_position(self,msg):
		""" callback for april tag position
		Args:
			msg (Pose): pose of the april tag
		"""
		if(self.leftcount < 1):
			self.left_tag_pose = msg
			Transformation = self.tag_in_base(self.left_tag_pose)
			self.quat_left, self.trans_left = extract_pose(Transformation)
			rospy.sleep(2)
			print("pose of left tag in base frame: \n")
			print("trans of left tag in base frame: \n")
			print(self.trans_left)
			print("orientation of left tag in base frame: \n")
			print(self.quat_left)
			self.leftcount += 1


	def right_tag_position(self,msg):
		""" callback for april tag position
		Args:
			msg (Pose): pose of the april tag
		"""
		if(self.rightcount < 1):
			self.right_tag_position = msg
			Transformation = self.tag_in_base(self.right_tag_position)
			self.quat_right, self.trans_right = extract_pose(Transformation)
			rospy.sleep(2)
			print("pose of right tag")
			print("trans of right tag in base frame: \n")
			print(self.trans_right)
			print("orientation of right tag in base frame: \n")
			print(self.quat_right)
			self.rightcount +=1

	def move_to_keys(self,left_offset,right_offset,pre_standoff = False,poke = False):
		"""move both arm to a goal pose"""
		# left_pose_goal.position.x = 0.78373497
		# left_pose_goal.position.y =  0.34865032
		# left_pose_goal.position.z =  -0.16783931
		# right_pose_goal.position.x = 0.78288658
		# right_pose_goal.position.y = -0.11776263
		# right_pose_goal.position.z = -0.18157599
		left_pose_goal = geometry_msgs.msg.Pose()
		right_pose_goal = geometry_msgs.msg.Pose()
		if pre_standoff:
			print("pre-standoff")

			left_pose_goal.position.x = self.trans_left[0] + self.left_tunning
			left_pose_goal.position.y = self.trans_left[1] + left_offset * self.key_length
			left_pose_goal.position.z = self.trans_left[2] + self.prestand_z
			left_pose_goal.orientation.x = self.left_orientation_x
			left_pose_goal.orientation.y = self.left_orientation_y
			left_pose_goal.orientation.z = self.left_orientation_z
			left_pose_goal.orientation.w = self.left_orientation_w

			print("left pose is")
			print(left_pose_goal) 

			right_pose_goal.position.x = self.trans_right[0]  
			right_pose_goal.position.y = self.trans_right[1] + right_offset * self.key_length
			right_pose_goal.position.z = self.trans_right[2] + self.prestand_z 
			right_pose_goal.orientation.x = self.right_orientation_x
			right_pose_goal.orientation.y = self.right_orientation_y
			right_pose_goal.orientation.z = self.right_orientation_z
			right_pose_goal.orientation.w = self.right_orientation_w

			print("right pose is")
			print(right_pose_goal) 

		elif poke:
			print("play")
			left_pose_goal.position.x = self.trans_left[0] + self.left_tunning
			left_pose_goal.position.y = self.trans_left[1] + left_offset * self.key_length
			left_pose_goal.position.z = self.trans_left[2] 
			left_pose_goal.orientation.x = self.left_orientation_x
			left_pose_goal.orientation.y = self.left_orientation_y
			left_pose_goal.orientation.z = self.left_orientation_z
			left_pose_goal.orientation.w = self.left_orientation_w
			print("left pose is")
			print(left_pose_goal) 

			right_pose_goal.position.x = self.trans_right[0] 
			right_pose_goal.position.y = self.trans_right[1]  + right_offset * self.key_length
			right_pose_goal.position.z = self.trans_right[2] 
			right_pose_goal.orientation.y = self.right_orientation_y
			right_pose_goal.orientation.z = self.right_orientation_z
			right_pose_goal.orientation.w = self.right_orientation_w

			print("right pose is")
			print(right_pose_goal)

			# left_pose_goal.position.x = 0.78373497
			# left_pose_goal.position.y = 0.34865032 + left_offset
			# left_pose_goal.position.z = -0.16783931


			# right_pose_goal.position.x =0.78288658 
			# right_pose_goal.position.y =-0.11776263 + right_offset
			# right_pose_goal.position.z =-0.18157599 




		self.move_group.set_pose_target(left_pose_goal,"left_gripper")
		self.move_group.set_pose_target(right_pose_goal,"right_gripper")

		plan = self.move_group.plan()
		display_trajectory(plan, self.robot, self.display_trajectory_publisher)

		rospy.sleep(2)
		#Execute the plan
		confirmed = raw_input('Execute? y/n')
		if confirmed == "y":
			self.move_group.execute(plan)
			rospy.sleep(2)


	def go_right_tag(self):
		"""move the right arm to 0.1m above the right tag"""
		right_group = moveit_commander.MoveGroupCommander("right_arm")
		tolerance = 0.01
		right_group.set_goal_position_tolerance(tolerance)
		right_group.set_goal_orientation_tolerance(tolerance)
		right_group.set_planning_time(5.0)
		right_group.allow_replanning(True)
		right_group.set_max_velocity_scaling_factor(0.6)
		right_group.set_max_acceleration_scaling_factor(0.6)

		right_pose_goal = geometry_msgs.msg.Pose()
		
		right_pose_goal.position.x = self.trans_right[0] 
		right_pose_goal.position.y = self.trans_right[1] 
		right_pose_goal.position.z = self.trans_right[2] + self.prestand_z 
		# right_pose_goal.position.x = 0.78288658
		# right_pose_goal.position.y = -0.11776263
		# right_pose_goal.position.z = -0.18157599
		right_pose_goal.orientation.x = self.right_orientation_x
		right_pose_goal.orientation.y = self.right_orientation_y
		right_pose_goal.orientation.z = self.right_orientation_z
		right_pose_goal.orientation.w = self.right_orientation_w

		print("right pose goal is")
		print(right_pose_goal)

		right_group.set_pose_target(right_pose_goal)
		plan = right_group.plan()
		display_trajectory(plan, self.robot, self.display_trajectory_publisher)

		raw_input("Press <Enter> to move the right arm to tag position: ")
		confirmed = raw_input('Keep probing downwards? y/n')
		if confirmed == "y":
			right_group.execute(plan)

	def go_left_tag(self):
		"""move the left arm to 0.1m above the left tag"""
		left_group = moveit_commander.MoveGroupCommander("left_arm")
		tolerance = 0.01
		left_group.set_goal_position_tolerance(tolerance)
		left_group.set_goal_orientation_tolerance(tolerance)
		left_group.set_planning_time(5.0)
		left_group.allow_replanning(True)
		left_group.set_max_velocity_scaling_factor(0.6)
		left_group.set_max_acceleration_scaling_factor(0.6)

		left_pose_goal = geometry_msgs.msg.Pose()
		
			
		left_pose_goal.position.x = self.trans_left[0]  
		left_pose_goal.position.y = self.trans_left[1] 
		left_pose_goal.position.z = self.trans_left[2] + self.prestand_z 
		
		# left_pose_goal.position.x = 0.78373497
		# left_pose_goal.position.y =  0.34865032
		# left_pose_goal.position.z =  -0.16783931

		left_pose_goal.orientation.x = self.left_orientation_x
		left_pose_goal.orientation.y = self.left_orientation_y
		left_pose_goal.orientation.z = self.left_orientation_z
		left_pose_goal.orientation.w = self.left_orientation_w

		print("left pose goal is")
		print(left_pose_goal)


		left_group.set_pose_target(left_pose_goal)
		plan = left_group.plan()
		display_trajectory(plan, self.robot, self.display_trajectory_publisher)

		raw_input("Press <Enter> to move the left arm to tag position: ")
		confirmed = raw_input('Keep probing downwards? y/n')
		if confirmed == "y":
			left_group.execute(plan)

	def play_both_arm(self):
		""" start playing the piano, move both arm together
		The trajectory is divided into three stages
		1) move gripper to standoff location
		2) move gripper to hit the key
		3) move gripper back to standoff location
		"""
		left_offset = [0,-2,-3,-2,-1,0,1,0]
		rignt_offset = [0,-5,-6,-5,-4,-3,-2,-1]

		for i in range(8):
			print("============ Execute the", i ,"th key ============")
			# # stage 1
			print("============ Move to pre_standoff position ============")
			rospy.sleep(2)
			pre_standoff = self.move_to_keys(left_offset[i], rignt_offset[i],pre_standoff=True)

			# # stage 2
			print("============ Play the key ============")
			rospy.sleep(2)
			key_play = self.move_to_keys(left_offset[i], rignt_offset[i],poke=True)

			# stage 3
			print("============ Finish pressing the key, move back to pre_standoff position ============")
			#raw_input()
			finish = self.move_to_keys(left_offset[i],rignt_offset[i],pre_standoff=True)
			rospy.sleep(2)






def main():
	
	play_piano = PianoPlay()
	# play_piano.go_left_tag()
	# rospy.sleep(2)
	# play_piano.go_right_tag()
	try:
		rospy.sleep(2)
		print("start playing")
		play_piano.play_both_arm()	
		# play_piano.test_simulation()
		# play_piano.play_both_arm(0,0,stand = True)

	except rospy.ROSInterruptException:
		return
	except KeyboardInterrupt:
		return

	rospy.spin()


if __name__ == '__main__':
	main()